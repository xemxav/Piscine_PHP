trait Dump {

}

clas Exemple {

	use Dump;
}

trait = ce aue les classes vont partager de facon verticale

utiliser de multiple traits : 

class Exemple A {

	use trait1, trait 2 {
		trait2::nom_methode insteadof trait1; -> donne la priorité a la nom_methode isuus de trait2
	}
}

use permet de renommer les methodes dans les traits
class Exemple A {

	use trait1, trait 2 {
		nom_methode_dans_trait as nouveau_nom
	}
}

Traits et methodes abstraites

un trait peut use un trait
donc un trait peut avoir un abstract que le trait qui le use va devoir implementer.

Finalize : 

final placé devant une classe va interdir d'etre hérité
final placé devant une methode va interdir de la redefinir

exeptions :

try {

	throw new Exception ( ) ->>throw leve une exeption, cree une nouvelle instance de la classe Exception

} catch ( Exception $exc) {

}

reflexion API

reflexivité : permet a un langage d'aller voir ce qu'il se passe dans une classe ou dans une instance.
deux classes : ReflectionClass et ReflectionObject

on passe en paramettre la classe/l'instance qu'on veut etudier lors de la creation d'une de ces classes
permet de serializé/unserializé une classe
 